"""Eular Problem 12 - :
    What is the value of the first triangle number to have over five hundred
    divisors?
"""
from . import timer

from .primes import get_prime_factors

DESC = 'Triangle numbers'
SOLUTION = 76576500


@timer.timeit
def solve():
    result = 0
    for result in triangles():
        # Skip checking numbers that don't end in 0.
        if result % 10 != 0:
            continue
        f = divisors(result)

        if len(f) > 500:
            break
    return result


def divisors(n):
    """ Creates a list of all the factors of n and returns them as a set. First
        we get the prime factors of n. To get any remaining factors, we take all
        the prime factors and take each to it's maximum power. This results in a
        list of factors we can use to build the remaining factors.
    """
    if n < 1:
        raise ValueError('factors.divisors(n): n needs to be a positive integer')
    elif n == 1:
        return {1}

    prime_facts = get_prime_factors(n)
    if prime_facts is None:
        return None

    factors = list(prime_facts)

    for x in factors:
        for y in factors:
            product = y * x

            if n % product == 0 and product not in factors:
                factors.append(product)

    # Cutting out 1 saves a lot of checks and is a factor of every positive number.
    factors.append(1)
    return set(factors)


def divisors_bruteforce(n):
    """
    Returns a set of all the divisors of n using a brute force check.  We only need to check up
    to (n/2) for any n, because n won't be divisible by anything larger than that. We'll also
    skip checking even divisors for odd numbers, since they won't be divisible, however this is
    still pretty slow for numbers over a million.
    """
    if n < 1:
        raise ValueError('factors.divisors(n): n needs to be a positive integer')

    factors = set()
    middle = n // 2

    if n % 2 == 0:  # It's even
        for i in range(1, middle + 1):
            if n % i == 0:
                factors.add(i)
    else:
        # It's odd (skip checking even factors)
        for i in range(1, middle + 1, 2):
            if n % i == 0:
                factors.add(i)

    # n will ALWAYS be a factor of itself.
    factors.add(n)
    return factors


def triangles():
    """ Defines a generator that generates triangle numbers. The sequence of
        triangle numbers is generated by adding the natural numbers. The first
        triangle number is 1, followed by 3, 6, 10, and so on.
    """
    x = 1
    tri = 1
    while True:
        yield tri
        x += 1
        tri += x


